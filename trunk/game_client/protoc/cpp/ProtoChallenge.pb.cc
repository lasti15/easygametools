// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoChallenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ROG {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ProtoChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoChallengeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoChallengeAccepted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoChallengeAccepted_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoNewHost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNewHost_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoChallenge_2eproto() {
  protobuf_AddDesc_ProtoChallenge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoChallenge.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoChallenge_descriptor_ = file->message_type(0);
  static const int ProtoChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallenge, challengerid_),
  };
  ProtoChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoChallenge_descriptor_,
      ProtoChallenge::default_instance_,
      ProtoChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoChallenge));
  ProtoChallengeResponse_descriptor_ = file->message_type(1);
  static const int ProtoChallengeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeResponse, userdetails_),
  };
  ProtoChallengeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoChallengeResponse_descriptor_,
      ProtoChallengeResponse::default_instance_,
      ProtoChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoChallengeResponse));
  ProtoChallengeAccepted_descriptor_ = file->message_type(2);
  static const int ProtoChallengeAccepted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeAccepted, hostdetails_),
  };
  ProtoChallengeAccepted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoChallengeAccepted_descriptor_,
      ProtoChallengeAccepted::default_instance_,
      ProtoChallengeAccepted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeAccepted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChallengeAccepted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoChallengeAccepted));
  ProtoNewHost_descriptor_ = file->message_type(3);
  static const int ProtoNewHost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNewHost, gamesync_),
  };
  ProtoNewHost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNewHost_descriptor_,
      ProtoNewHost::default_instance_,
      ProtoNewHost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNewHost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNewHost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNewHost));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoChallenge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoChallenge_descriptor_, &ProtoChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoChallengeResponse_descriptor_, &ProtoChallengeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoChallengeAccepted_descriptor_, &ProtoChallengeAccepted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNewHost_descriptor_, &ProtoNewHost::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoChallenge_2eproto() {
  delete ProtoChallenge::default_instance_;
  delete ProtoChallenge_reflection_;
  delete ProtoChallengeResponse::default_instance_;
  delete ProtoChallengeResponse_reflection_;
  delete ProtoChallengeAccepted::default_instance_;
  delete ProtoChallengeAccepted_reflection_;
  delete ProtoNewHost::default_instance_;
  delete ProtoNewHost_reflection_;
}

void protobuf_AddDesc_ProtoChallenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ROG::protocol::protobuf_AddDesc_Protocol_2eproto();
  ::ROG::protocol::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoChallenge.proto\022\014ROG.protocol\032\016Pr"
    "otocol.proto\032\nUser.proto\"v\n\016ProtoChallen"
    "ge\022\024\n\014challengerId\030\001 \002(\0042N\n\tchallenge\022\035."
    "ROG.protocol.ProtocolMessage\030f \001(\0132\034.ROG"
    ".protocol.ProtoChallenge\"\241\001\n\026ProtoChalle"
    "ngeResponse\022\'\n\013userDetails\030\001 \002(\0132\022.ROG.p"
    "rotocol.User2^\n\021challengeResponse\022\035.ROG."
    "protocol.ProtocolMessage\030g \001(\0132$.ROG.pro"
    "tocol.ProtoChallengeResponse\"\241\001\n\026ProtoCh"
    "allengeAccepted\022\'\n\013hostDetails\030\001 \002(\0132\022.R"
    "OG.protocol.User2^\n\021challengeAccepted\022\035."
    "ROG.protocol.ProtocolMessage\030h \001(\0132$.ROG"
    ".protocol.ProtoChallengeAccepted\"l\n\014Prot"
    "oNewHost\022\020\n\010gameSync\030\001 \002(\0042J\n\007newHost\022\035."
    "ROG.protocol.ProtocolMessage\030i \001(\0132\032.ROG"
    ".protocol.ProtoNewHost", 622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoChallenge.proto", &protobuf_RegisterTypes);
  ProtoChallenge::default_instance_ = new ProtoChallenge();
  ProtoChallengeResponse::default_instance_ = new ProtoChallengeResponse();
  ProtoChallengeAccepted::default_instance_ = new ProtoChallengeAccepted();
  ProtoNewHost::default_instance_ = new ProtoNewHost();
  ProtoChallenge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ROG::protocol::ProtocolMessage::default_instance(),
    102, 11, false, false,
    &::ROG::protocol::ProtoChallenge::default_instance());
  ProtoChallengeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ROG::protocol::ProtocolMessage::default_instance(),
    103, 11, false, false,
    &::ROG::protocol::ProtoChallengeResponse::default_instance());
  ProtoChallengeAccepted::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ROG::protocol::ProtocolMessage::default_instance(),
    104, 11, false, false,
    &::ROG::protocol::ProtoChallengeAccepted::default_instance());
  ProtoNewHost::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ROG::protocol::ProtocolMessage::default_instance(),
    105, 11, false, false,
    &::ROG::protocol::ProtoNewHost::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoChallenge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoChallenge_2eproto {
  StaticDescriptorInitializer_ProtoChallenge_2eproto() {
    protobuf_AddDesc_ProtoChallenge_2eproto();
  }
} static_descriptor_initializer_ProtoChallenge_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtoChallenge::kChallengerIdFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProtoChallenge::kChallengeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ROG::protocol::ProtocolMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::ROG::protocol::ProtoChallenge >, 11, false >
  ProtoChallenge::challenge(kChallengeFieldNumber, ::ROG::protocol::ProtoChallenge::default_instance());
ProtoChallenge::ProtoChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoChallenge::InitAsDefaultInstance() {
}

ProtoChallenge::ProtoChallenge(const ProtoChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoChallenge::SharedCtor() {
  _cached_size_ = 0;
  challengerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoChallenge::~ProtoChallenge() {
  SharedDtor();
}

void ProtoChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoChallenge_descriptor_;
}

const ProtoChallenge& ProtoChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChallenge_2eproto();  return *default_instance_;
}

ProtoChallenge* ProtoChallenge::default_instance_ = NULL;

ProtoChallenge* ProtoChallenge::New() const {
  return new ProtoChallenge;
}

void ProtoChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 challengerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &challengerid_)));
          set_has_challengerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 challengerId = 1;
  if (has_challengerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->challengerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 challengerId = 1;
  if (has_challengerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->challengerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoChallenge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 challengerId = 1;
    if (has_challengerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->challengerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoChallenge::MergeFrom(const ProtoChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengerid()) {
      set_challengerid(from.challengerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoChallenge::CopyFrom(const ProtoChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoChallenge::Swap(ProtoChallenge* other) {
  if (other != this) {
    std::swap(challengerid_, other->challengerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoChallenge_descriptor_;
  metadata.reflection = ProtoChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoChallengeResponse::kUserDetailsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProtoChallengeResponse::kChallengeResponseFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ROG::protocol::ProtocolMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::ROG::protocol::ProtoChallengeResponse >, 11, false >
  ProtoChallengeResponse::challengeResponse(kChallengeResponseFieldNumber, ::ROG::protocol::ProtoChallengeResponse::default_instance());
ProtoChallengeResponse::ProtoChallengeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoChallengeResponse::InitAsDefaultInstance() {
  userdetails_ = const_cast< ::ROG::protocol::User*>(&::ROG::protocol::User::default_instance());
}

ProtoChallengeResponse::ProtoChallengeResponse(const ProtoChallengeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  userdetails_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoChallengeResponse::~ProtoChallengeResponse() {
  SharedDtor();
}

void ProtoChallengeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userdetails_;
  }
}

void ProtoChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoChallengeResponse_descriptor_;
}

const ProtoChallengeResponse& ProtoChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChallenge_2eproto();  return *default_instance_;
}

ProtoChallengeResponse* ProtoChallengeResponse::default_instance_ = NULL;

ProtoChallengeResponse* ProtoChallengeResponse::New() const {
  return new ProtoChallengeResponse;
}

void ProtoChallengeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userdetails()) {
      if (userdetails_ != NULL) userdetails_->::ROG::protocol::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ROG.protocol.User userDetails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ROG.protocol.User userDetails = 1;
  if (has_userdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetails(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ROG.protocol.User userDetails = 1;
  if (has_userdetails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetails(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoChallengeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ROG.protocol.User userDetails = 1;
    if (has_userdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetails());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoChallengeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoChallengeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoChallengeResponse::MergeFrom(const ProtoChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetails()) {
      mutable_userdetails()->::ROG::protocol::User::MergeFrom(from.userdetails());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoChallengeResponse::CopyFrom(const ProtoChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoChallengeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_userdetails()) {
    if (!this->userdetails().IsInitialized()) return false;
  }
  return true;
}

void ProtoChallengeResponse::Swap(ProtoChallengeResponse* other) {
  if (other != this) {
    std::swap(userdetails_, other->userdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoChallengeResponse_descriptor_;
  metadata.reflection = ProtoChallengeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoChallengeAccepted::kHostDetailsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProtoChallengeAccepted::kChallengeAcceptedFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ROG::protocol::ProtocolMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::ROG::protocol::ProtoChallengeAccepted >, 11, false >
  ProtoChallengeAccepted::challengeAccepted(kChallengeAcceptedFieldNumber, ::ROG::protocol::ProtoChallengeAccepted::default_instance());
ProtoChallengeAccepted::ProtoChallengeAccepted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoChallengeAccepted::InitAsDefaultInstance() {
  hostdetails_ = const_cast< ::ROG::protocol::User*>(&::ROG::protocol::User::default_instance());
}

ProtoChallengeAccepted::ProtoChallengeAccepted(const ProtoChallengeAccepted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoChallengeAccepted::SharedCtor() {
  _cached_size_ = 0;
  hostdetails_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoChallengeAccepted::~ProtoChallengeAccepted() {
  SharedDtor();
}

void ProtoChallengeAccepted::SharedDtor() {
  if (this != default_instance_) {
    delete hostdetails_;
  }
}

void ProtoChallengeAccepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoChallengeAccepted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoChallengeAccepted_descriptor_;
}

const ProtoChallengeAccepted& ProtoChallengeAccepted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChallenge_2eproto();  return *default_instance_;
}

ProtoChallengeAccepted* ProtoChallengeAccepted::default_instance_ = NULL;

ProtoChallengeAccepted* ProtoChallengeAccepted::New() const {
  return new ProtoChallengeAccepted;
}

void ProtoChallengeAccepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostdetails()) {
      if (hostdetails_ != NULL) hostdetails_->::ROG::protocol::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoChallengeAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ROG.protocol.User hostDetails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hostdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoChallengeAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ROG.protocol.User hostDetails = 1;
  if (has_hostdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hostdetails(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoChallengeAccepted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ROG.protocol.User hostDetails = 1;
  if (has_hostdetails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hostdetails(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoChallengeAccepted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ROG.protocol.User hostDetails = 1;
    if (has_hostdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hostdetails());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoChallengeAccepted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoChallengeAccepted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoChallengeAccepted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoChallengeAccepted::MergeFrom(const ProtoChallengeAccepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostdetails()) {
      mutable_hostdetails()->::ROG::protocol::User::MergeFrom(from.hostdetails());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoChallengeAccepted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoChallengeAccepted::CopyFrom(const ProtoChallengeAccepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoChallengeAccepted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hostdetails()) {
    if (!this->hostdetails().IsInitialized()) return false;
  }
  return true;
}

void ProtoChallengeAccepted::Swap(ProtoChallengeAccepted* other) {
  if (other != this) {
    std::swap(hostdetails_, other->hostdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoChallengeAccepted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoChallengeAccepted_descriptor_;
  metadata.reflection = ProtoChallengeAccepted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoNewHost::kGameSyncFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProtoNewHost::kNewHostFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ROG::protocol::ProtocolMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::ROG::protocol::ProtoNewHost >, 11, false >
  ProtoNewHost::newHost(kNewHostFieldNumber, ::ROG::protocol::ProtoNewHost::default_instance());
ProtoNewHost::ProtoNewHost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoNewHost::InitAsDefaultInstance() {
}

ProtoNewHost::ProtoNewHost(const ProtoNewHost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoNewHost::SharedCtor() {
  _cached_size_ = 0;
  gamesync_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNewHost::~ProtoNewHost() {
  SharedDtor();
}

void ProtoNewHost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoNewHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNewHost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNewHost_descriptor_;
}

const ProtoNewHost& ProtoNewHost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChallenge_2eproto();  return *default_instance_;
}

ProtoNewHost* ProtoNewHost::default_instance_ = NULL;

ProtoNewHost* ProtoNewHost::New() const {
  return new ProtoNewHost;
}

void ProtoNewHost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamesync_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNewHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gameSync = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gamesync_)));
          set_has_gamesync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoNewHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gameSync = 1;
  if (has_gamesync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gamesync(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoNewHost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gameSync = 1;
  if (has_gamesync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gamesync(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoNewHost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gameSync = 1;
    if (has_gamesync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gamesync());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNewHost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNewHost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNewHost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNewHost::MergeFrom(const ProtoNewHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesync()) {
      set_gamesync(from.gamesync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNewHost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNewHost::CopyFrom(const ProtoNewHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNewHost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoNewHost::Swap(ProtoNewHost* other) {
  if (other != this) {
    std::swap(gamesync_, other->gamesync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNewHost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNewHost_descriptor_;
  metadata.reflection = ProtoNewHost_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace ROG

// @@protoc_insertion_point(global_scope)
